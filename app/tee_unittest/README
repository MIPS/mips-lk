=== TEE unittest HOWTO ===

Updated: Oct 26, 2016.

The main purpose of the tee_unittest framework is to help the TEE developers in
verifying that the system meets the GP specification requirements. It is based
on OP-TEE sanity test suite and Global Platform Compliance Test Suite.

Directory Layout & File Structure
=================================

- app/tee_unittest:
    -- tee_unittest.c : Main functions of the testing Client Application. Since
       Rich OS is not available at this point, it's actually a Client Trusted
       Application.
    -- test_helpers.c : Provides main functionality of the test framework
       through run_all_tests() function, as well as some helper functions.
    -- teec_api.c : Provides wrappers for mapping GP Client API functions to GP
       Internal Client API funcions, needed until there's a working REE-TEE
       communication and GP Client API implementation.
- app/tee_unittest/include : Provides various common macros and functions used
  in the test framework.
- app/tee_unittest/ta : Source code for all the Trusted Applications used in the
  test framework.
- app/tee_unittest/tests : Definition of test cases.

The tee_unittest directory contains the source code for the testing client-side
framework and trusted applications which are used in various test cases.

Test framework code structure
=============================
Main function is located in tee_unittest_entry() function. It registers various
grups of test cases. These are defined in tests/tee_test_xxxx.c files. What test
cases are ran is defined by RUN_TEST(test_name) macros enclosed by BEGIN_TEST_CASE
and END_TEST_CASE macros.

Building and running
====================

Prerequisites:
- mips-mti-elf toolchain
- qemu-system-mipsel

Run:
    ./lk/scripts/do-qemumips-malta -p mips-malta-teeunittest
from the root of the project (mips-lk directory).

This will build lk, trusty and tee_unittest and run all the currently registered
test cases.

At this point, the infrastucture for selecting the desired test cases to run is
not implemented. The only way to run a selection of test cases is to comment out
the test cases that are not to be run. Do this by commenting the entire test case
group in tee_unittest_entry() function, or by disabling a single test case by
commenting out the appropriate RUN_TEST(test_name) line.

Test results
============
== Oct 26, 2016 ==
    - tee_test_get_property_as_string_without_enum_success : FAIL
        -- fails due to missing Implementation Properties (platform dependant)
    - tee_test_open_ta_session_cancellation : FAIL
        -- fails due to unimplemented cancellation mechanism
    - tee_test_basic_os_features : FAIL
        -- fails due to client properties
    - tee_test_invoke_command : FAIL
        -- fails due to unimplemented TA
    - tee_test_invoke_command_with_timeout : FAIL
        -- fails due to unimplemented timeouts

** Note ** Some of the test cases are disabled by default, since some of the
neccessary infrastructure is missing.